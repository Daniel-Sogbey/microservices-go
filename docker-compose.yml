services:

  postgres:
    image: postgres:14.2
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - auth-postgres-data:/var/lib/postgresql/data/
    deploy:
      mode: replicated
      replicas: 1

  mongo:
    image: mongo:4.2.16-bionic
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - log-mongo-data:/data/db

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"
      - "8025:8025"

  rabbitmq:
    image: rabbitmq:3.13.7-alpine
    ports:
      - "5672:5672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    deploy:
      mode: replicated
      replicas: 1

  broker-service:
    build:
      context: ./broker-service
      dockerfile: broker-service.dockerfile
    restart: always
    ports:
      - "8080:80" #8080 local 80 in docker image
    deploy:
      mode: replicated
      replicas: 1

  authentication-service:
    build:
      context: ./authentication-service
      dockerfile: authentication-service.dockerfile
    restart: always
    ports:
      - "8081:80"
    env_file:
      - .env
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      - postgres
      - mongo

  logger-service:
    build:
      context: ./logger-service
      dockerfile: logger-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      - mongo

  mail-service:
    build:
      context: ./mail-service
      dockerfile: mail-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    env_file:
      - .env

volumes:
  auth-postgres-data:
  log-mongo-data:
  rabbitmq-data: